import { fileURLToPath } from "url";
import * as colors from "kleur/colors";
import { debug } from "../logger.js";
import { preload as ssrPreload } from "../render/dev/index.js";
import { generateRssFunction } from "../render/rss.js";
import { callGetStaticPaths } from "../render/route-cache.js";
async function collectPagesData(opts) {
  const { astroConfig, logging, manifest, origin, routeCache, viteServer } = opts;
  const assets = {};
  const allPages = {};
  await Promise.all(manifest.routes.map(async (route) => {
    var _a;
    if (route.pathname) {
      allPages[route.component] = {
        route,
        paths: [route.pathname],
        preload: await ssrPreload({
          astroConfig,
          filePath: new URL(`./${route.component}`, astroConfig.projectRoot),
          logging,
          mode: "production",
          origin,
          pathname: route.pathname,
          route,
          routeCache,
          viteServer
        }).then((routes) => {
          const html = `${route.pathname}`.replace(/\/?$/, "/index.html");
          debug("build", `\u251C\u2500\u2500 ${colors.bold(colors.green("\u2714"))} ${route.component} \u2192 ${colors.yellow(html)}`);
          return routes;
        }).catch((err) => {
          debug("build", `\u251C\u2500\u2500 ${colors.bold(colors.red("\u2718"))} ${route.component}`);
          throw err;
        })
      };
      return;
    }
    const result = await getStaticPathsForRoute(opts, route).then((_result) => {
      const label = _result.staticPaths.length === 1 ? "page" : "pages";
      debug("build", `\u251C\u2500\u2500 ${colors.bold(colors.green("\u2714"))} ${route.component} \u2192 ${colors.magenta(`[${_result.staticPaths.length} ${label}]`)}`);
      return _result;
    }).catch((err) => {
      debug("build", `\u251C\u2500\u2500 ${colors.bold(colors.red("\u2717"))} ${route.component}`);
      throw err;
    });
    const rssFn = generateRssFunction(astroConfig.buildOptions.site, route);
    for (const rssCallArg of result.rss) {
      const rssResult = rssFn(rssCallArg);
      if (rssResult.xml) {
        const { url, content } = rssResult.xml;
        if (content) {
          const rssFile = new URL(url.replace(/^\/?/, "./"), astroConfig.dist);
          if (assets[fileURLToPath(rssFile)]) {
            throw new Error(`[getStaticPaths] RSS feed ${url} already exists.
Use \`rss(data, {url: '...'})\` to choose a unique, custom URL. (${route.component})`);
          }
          assets[fileURLToPath(rssFile)] = content;
        }
      }
      if ((_a = rssResult.xsl) == null ? void 0 : _a.content) {
        const { url, content } = rssResult.xsl;
        const stylesheetFile = new URL(url.replace(/^\/?/, "./"), astroConfig.dist);
        if (assets[fileURLToPath(stylesheetFile)]) {
          throw new Error(`[getStaticPaths] RSS feed stylesheet ${url} already exists.
Use \`rss(data, {stylesheet: '...'})\` to choose a unique, custom URL. (${route.component})`);
        }
        assets[fileURLToPath(stylesheetFile)] = content;
      }
    }
    const finalPaths = result.staticPaths.map((staticPath) => staticPath.params && route.generate(staticPath.params)).filter(Boolean);
    allPages[route.component] = {
      route,
      paths: finalPaths,
      preload: await ssrPreload({
        astroConfig,
        filePath: new URL(`./${route.component}`, astroConfig.projectRoot),
        logging,
        mode: "production",
        origin,
        pathname: finalPaths[0],
        route,
        routeCache,
        viteServer
      })
    };
  }));
  return { assets, allPages };
}
async function getStaticPathsForRoute(opts, route) {
  const { astroConfig, logging, routeCache, viteServer } = opts;
  if (!viteServer)
    throw new Error(`vite.createServer() not called!`);
  const filePath = new URL(`./${route.component}`, astroConfig.projectRoot);
  const mod = await viteServer.ssrLoadModule(fileURLToPath(filePath));
  const result = await callGetStaticPaths(mod, route, false, logging);
  routeCache.set(route, result);
  return result;
}
export {
  collectPagesData
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvYnVpbGQvcGFnZS1kYXRhLnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBaUJBLGdDQUF1QyxNQUFnRTtBQUN0RyxRQUFNLEVBQUUsYUFBYSxTQUFTLFVBQVUsUUFBUSxZQUFZLGVBQWU7QUFFM0UsUUFBTSxTQUFpQztBQUN2QyxRQUFNLFdBQXlCO0FBTS9CLFFBQU0sUUFBUSxJQUNiLFNBQVMsT0FBTyxJQUFJLE9BQU8sVUFBVTtBQXRDdkM7QUF3Q0csUUFBSSxNQUFNLFVBQVU7QUFDbkIsZUFBUyxNQUFNLGFBQWE7QUFBQSxRQUMzQjtBQUFBLFFBQ0EsT0FBTyxDQUFDLE1BQU07QUFBQSxRQUNkLFNBQVMsTUFBTSxXQUFXO0FBQUEsVUFDekI7QUFBQSxVQUNBLFVBQVUsSUFBSSxJQUFJLEtBQUssTUFBTSxhQUFhLFlBQVk7QUFBQSxVQUN0RDtBQUFBLFVBQ0EsTUFBTTtBQUFBLFVBQ047QUFBQSxVQUNBLFVBQVUsTUFBTTtBQUFBLFVBQ2hCO0FBQUEsVUFDQTtBQUFBLFVBQ0E7QUFBQSxXQUVDLEtBQUssQ0FBQyxXQUFXO0FBQ2pCLGdCQUFNLE9BQU8sR0FBRyxNQUFNLFdBQVcsUUFBUSxRQUFRO0FBQ2pELGdCQUFNLFNBQVMsc0JBQU8sT0FBTyxLQUFLLE9BQU8sTUFBTSxjQUFTLE1BQU0sb0JBQWUsT0FBTyxPQUFPO0FBQzNGLGlCQUFPO0FBQUEsV0FFUCxNQUFNLENBQUMsUUFBUTtBQUNmLGdCQUFNLFNBQVMsc0JBQU8sT0FBTyxLQUFLLE9BQU8sSUFBSSxjQUFTLE1BQU07QUFDNUQsZ0JBQU07QUFBQTtBQUFBO0FBR1Q7QUFBQTtBQUdELFVBQU0sU0FBUyxNQUFNLHVCQUF1QixNQUFNLE9BQ2hELEtBQUssQ0FBQyxZQUFZO0FBQ2xCLFlBQU0sUUFBUSxRQUFRLFlBQVksV0FBVyxJQUFJLFNBQVM7QUFDMUQsWUFBTSxTQUFTLHNCQUFPLE9BQU8sS0FBSyxPQUFPLE1BQU0sY0FBUyxNQUFNLG9CQUFlLE9BQU8sUUFBUSxJQUFJLFFBQVEsWUFBWSxVQUFVO0FBQzlILGFBQU87QUFBQSxPQUVQLE1BQU0sQ0FBQyxRQUFRO0FBQ2YsWUFBTSxTQUFTLHNCQUFPLE9BQU8sS0FBSyxPQUFPLElBQUksY0FBUyxNQUFNO0FBQzVELFlBQU07QUFBQTtBQUVSLFVBQU0sUUFBUSxvQkFBb0IsWUFBWSxhQUFhLE1BQU07QUFDakUsZUFBVyxjQUFjLE9BQU8sS0FBSztBQUNwQyxZQUFNLFlBQVksTUFBTTtBQUN4QixVQUFJLFVBQVUsS0FBSztBQUNsQixjQUFNLEVBQUUsS0FBSyxZQUFZLFVBQVU7QUFDbkMsWUFBSSxTQUFTO0FBQ1osZ0JBQU0sVUFBVSxJQUFJLElBQUksSUFBSSxRQUFRLFFBQVEsT0FBTyxZQUFZO0FBQy9ELGNBQUksT0FBTyxjQUFjLFdBQVc7QUFDbkMsa0JBQU0sSUFBSSxNQUFNLDZCQUE2QjtBQUFBLG1FQUF5RixNQUFNO0FBQUE7QUFFN0ksaUJBQU8sY0FBYyxZQUFZO0FBQUE7QUFBQTtBQUduQyxVQUFJLGdCQUFVLFFBQVYsbUJBQWUsU0FBUztBQUMzQixjQUFNLEVBQUUsS0FBSyxZQUFZLFVBQVU7QUFDbkMsY0FBTSxpQkFBaUIsSUFBSSxJQUFJLElBQUksUUFBUSxRQUFRLE9BQU8sWUFBWTtBQUN0RSxZQUFJLE9BQU8sY0FBYyxrQkFBa0I7QUFDMUMsZ0JBQU0sSUFBSSxNQUNULHdDQUF3QztBQUFBLDBFQUFnRyxNQUFNO0FBQUE7QUFHaEosZUFBTyxjQUFjLG1CQUFtQjtBQUFBO0FBQUE7QUFHMUMsVUFBTSxhQUFhLE9BQU8sWUFBWSxJQUFJLENBQUMsZUFBZSxXQUFXLFVBQVUsTUFBTSxTQUFTLFdBQVcsU0FBUyxPQUFPO0FBQ3pILGFBQVMsTUFBTSxhQUFhO0FBQUEsTUFDM0I7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVMsTUFBTSxXQUFXO0FBQUEsUUFDekI7QUFBQSxRQUNBLFVBQVUsSUFBSSxJQUFJLEtBQUssTUFBTSxhQUFhLFlBQVk7QUFBQSxRQUN0RDtBQUFBLFFBQ0EsTUFBTTtBQUFBLFFBQ047QUFBQSxRQUNBLFVBQVUsV0FBVztBQUFBLFFBQ3JCO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQTtBQUFBO0FBQUE7QUFNSixTQUFPLEVBQUUsUUFBUTtBQUFBO0FBR2xCLHNDQUFzQyxNQUErQixPQUE0QztBQUNoSCxRQUFNLEVBQUUsYUFBYSxTQUFTLFlBQVksZUFBZTtBQUN6RCxNQUFJLENBQUM7QUFBWSxVQUFNLElBQUksTUFBTTtBQUNqQyxRQUFNLFdBQVcsSUFBSSxJQUFJLEtBQUssTUFBTSxhQUFhLFlBQVk7QUFDN0QsUUFBTSxNQUFPLE1BQU0sV0FBVyxjQUFjLGNBQWM7QUFDMUQsUUFBTSxTQUFTLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxPQUFPO0FBQzNELGFBQVcsSUFBSSxPQUFPO0FBQ3RCLFNBQU87QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
